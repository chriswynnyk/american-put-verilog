//---------------------------------------------------------------------//
// Name:    vex.v
// Author:  Chris Wynnyk
// Date:    2/21/2008
// Purpose: This module creates and retrieves the exercise price, Vex.
//---------------------------------------------------------------------//

module vex(
    clk,
    nrst,
	start_s1,
	start_s2,
	log_lambda_up,
	log_lambda_down,
	K_over_S,
	chan0,
	chan1,
	chan2,
	chan3,
	valid,
	done_s1
);
	
input  clk;
input  nrst; 
input  start_s1;
input  start_s2;
input  [63:0] log_lambda_up;
input  [63:0] log_lambda_down;
input  [63:0] K_over_S;
output [63:0] chan0;
output [63:0] chan1;
output [63:0] chan2;
output [63:0] chan3;
output valid;
output done_s1;

//---------------------------------------------------------------------//
// Wires
//---------------------------------------------------------------------//
wire  [63:0] v_ex;
wire  [9:0] wraddr;
wire  [7:0] wren;

wire  [63:0] m0_out;
wire  [63:0] m1_out;
wire  [63:0] m2_out;
wire  [63:0] m3_out;
wire  [63:0] m4_out;
wire  [63:0] m5_out;
wire  [63:0] m6_out;
wire  [63:0] m7_out;

wire [63:0] bank0_out;
wire [63:0] bank1_out;
wire [63:0] bank2_out;
wire [63:0] bank3_out;

wire [63:0] chan0;
wire [63:0] chan1;
wire [63:0] chan2;
wire [63:0] chan3;

reg [9:0] bank0_addr;
reg [9:0] bank1_addr;
reg [9:0] bank2_addr;
reg [9:0] bank3_addr;

reg [9:0] bank0_base_addr;
reg [9:0] bank1_base_addr;
reg [9:0] bank2_base_addr;
reg [9:0] bank3_base_addr;

reg [12:0] counter1;
reg [15:0] timer1;
reg [15:0] timer2;
wire t1_expire = timer1[15];
wire t2_expire = timer2[15];

reg run;
reg valid;
reg odd;
reg odd_dly;
reg [1:0] sel;
reg [1:0] sel_dly;


//---------------------------------------------------------------------//
// Instantiations
//---------------------------------------------------------------------//
compute_vex compute_vex_inst(
  .clk(clk),
  .nrst(nrst),
  .start(start_s1),
  .log_lambda_up(log_lambda_up),
  .log_lambda_down(log_lambda_down),
  .K_over_S(K_over_S),
  .v_ex(v_ex),
  .wraddr(wraddr),
  .wren(wren),
  .done(done_s1)
);

mem_1k	m0 (
  .data(v_ex),
  .rdaddress(bank0_addr),
  .rdclock(!clk),
  .wraddress(wraddr),
  .wrclock(!clk),
  .wren(wren[0]),
  .q(m0_out)
);


mem_1k	m1 (
  .data(v_ex),
  .rdaddress(bank0_addr),
  .rdclock(!clk),
  .wraddress(wraddr),
  .wrclock(!clk),
  .wren(wren[1]),
  .q(m1_out)
);

mem_1k	m2 (
  .data(v_ex),
  .rdaddress(bank1_addr),
  .rdclock(!clk),
  .wraddress(wraddr),
  .wrclock(!clk),
  .wren(wren[2]),
  .q(m2_out)
);

mem_1k	m3 (
  .data(v_ex),
  .rdaddress(bank1_addr),
  .rdclock(!clk),
  .wraddress(wraddr),
  .wrclock(!clk),
  .wren(wren[3]),
  .q(m3_out)
);

mem_1k	m4 (
  .data(v_ex),
  .rdaddress(bank2_addr),
  .rdclock(!clk),
  .wraddress(wraddr),
  .wrclock(!clk),
  .wren(wren[4]),
  .q(m4_out)
);

mem_1k	m5 (
  .data(v_ex),
  .rdaddress(bank2_addr),
  .rdclock(!clk),
  .wraddress(wraddr),
  .wrclock(!clk),
  .wren(wren[5]),
  .q(m5_out)
);

mem_1k	m6 (
  .data(v_ex),
  .rdaddress(bank3_addr),
  .rdclock(!clk),
  .wraddress(wraddr),
  .wrclock(!clk),
  .wren(wren[6]),
  .q(m6_out)
);

mem_1k	m7 (
  .data(v_ex),
  .rdaddress(bank3_addr),
  .rdclock(!clk),
  .wraddress(wraddr),
  .wrclock(!clk),
  .wren(wren[7]),
  .q(m7_out)
);

//---------------------------------------------------------------------//
// Control Logic
//---------------------------------------------------------------------//

// Mux for even vs. odd memory bank.
assign bank0_out = odd_dly ? m1_out : m0_out;
assign bank1_out = odd_dly ? m3_out : m2_out;
assign bank2_out = odd_dly ? m5_out : m4_out;
assign bank3_out = odd_dly ? m7_out : m6_out;

// Mux for bank shifting based on select state.
assign chan0 = sel_dly[1]?(sel_dly[0]?bank3_out:bank2_out):(sel_dly[0]?bank1_out:bank0_out);
assign chan1 = sel_dly[1]?(sel_dly[0]?bank0_out:bank3_out):(sel_dly[0]?bank2_out:bank1_out);
assign chan2 = sel_dly[1]?(sel_dly[0]?bank1_out:bank0_out):(sel_dly[0]?bank3_out:bank2_out);
assign chan3 = sel_dly[1]?(sel_dly[0]?bank2_out:bank1_out):(sel_dly[0]?bank0_out:bank3_out);
   

// Decide when we are running.
always@(posedge clk)
  if(!nrst)          run <= 1'b0;
  else if(start_s2)  run <= 1'b1;
  else if(t1_expire) run <= 1'b0;
     
// Decide when output is valid (!t2_expire delayed by one clock cycle).
always@(posedge clk)
  if(!nrst) valid <= 1'b0;
  else      valid <= !t2_expire;
  
// Latch value for even/odd.
always@(posedge clk)
  if(!nrst) odd <= 0;
  else if(start_s2) odd <= 1'b1;
  else if(t2_expire && run) odd <= ~odd;
  
//Latch value for channel selection.
always@(posedge clk)
  if(!nrst) sel <= -1;
  else if(t2_expire) sel <= counter1[2:1];
  
// Delay odd and select by one full cycle.
always@(posedge clk)
  if(!nrst) begin
    odd_dly <= 1'b0;
    sel_dly <= 2'd0;
  end else begin
    odd_dly <= odd;
    sel_dly <= sel;
  end
  
// // Independent counters for each channel.    
// always@(posedge clk)
//   if(!nrst) begin
//     bank0_addr <= -1;
//     bank1_addr <= -1;
//     bank2_addr <= -1;
//     bank3_addr <= -1;
//     end
//   else if(run && t2_expire) begin
//     bank0_addr <= bank0_base_addr;
//     bank1_addr <= bank1_base_addr;
//     bank2_addr <= bank2_base_addr;
//     bank3_addr <= bank3_base_addr;
//     end
//   else if(run) begin
//     bank0_addr <= bank0_addr + 1;
//     bank1_addr <= bank1_addr + 1;
//     bank2_addr <= bank2_addr + 1;
//     bank3_addr <= bank3_addr + 1;
//   end

// // FSM to generate starting addresses using shift registers.
// always@(posedge clk)
//   if(!nrst) begin
//     bank0_base_addr <= 0;
//     bank1_base_addr <= 0;
//     bank2_base_addr <= 0;
//     bank3_base_addr <= 0;
//     end
//   else if(start_s2) begin
//     bank0_base_addr <= 0;
//     bank1_base_addr <= 0;
//     bank2_base_addr <= 0;
//     bank3_base_addr <= 0;
//     end
//   else if(run && t2_expire) begin
//     case (counter1[2:0])
//       3'b001: bank0_base_addr[9:0] <= counter1[12:3];
//       3'b011: bank1_base_addr[9:0] <= bank0_base_addr;
//       3'b101: bank2_base_addr[9:0] <= bank0_base_addr;
//       3'b111: bank3_base_addr[9:0] <= bank0_base_addr;
//     endcase
//   end
//   
//   
// //---------------------------------------------------------------------//
// // Timers and Counters.
// //---------------------------------------------------------------------//

// // Timer T1
// //  - "SLOW" timer.
// //  - Counts down from 8000.
// //  - Stops counting when it reaches -1.
// always @(posedge clk)
//   if (~nrst) timer1 <= -1;
//   else if(start_s2) timer1 <= {1'b0,15'd19};
//   else if(run && t2_expire) timer1 <= timer1 - 1;

// // Timer T2
// //  - "FASTER" innner loop timer.
// //  - Counts down from T1.
// //  - Resets when it hits -1.
// always @(posedge clk)
//   if (~nrst) timer2 <= -1;
//   else if(start_s2) timer2 <= -1;
//   else if(run && t2_expire) timer2 <= timer1;
//   else if(run && !t2_expire) timer2 <= timer2 -1;  

//  
// // Counter C1
// //  Bit 0 is equivalent to odd/even.
// //  Bits [2:1] are used for channel selection.
// //  Bits [12:3] are loaded as the base memory address.
// //  Bits [2:0] are also used in an FSM for generating base addresses.
// //
// always @(posedge clk)
//   if (~nrst) counter1 <= -1;
//   else if(start_s2) counter1 <= 8;
//   else if(run && t2_expire) counter1 <= counter1 + 1;

endmodule